using AssemblyVersionInfo;
using Microsoft.CodeAnalysis;
using Microsoft.Extensions.ObjectPool;
using System.Collections.Immutable;
using System.Text;
using TSRuntime.Configs;
using TSRuntime.Parsing;

namespace TSRuntime.Generation;

/// <summary>
/// Builds the extension method for <i>IServiceCollection</i> for registering TSRuntime.
/// </summary>
public static class ServiceExtensionBuilder {
    /// <summary>
    /// Builds the extension method for <i>IServiceCollection</i> for registering TSRuntime.
    /// </summary>
    /// <param name="stringBuilderPool"></param>
    /// <param name="context"></param>
    /// <param name="parameters"></param>
    public static void BuildServiceExtension(this ObjectPool<StringBuilder> stringBuilderPool, SourceProductionContext context, (ImmutableArray<TSModule> moduleList, (Config? config, Diagnostic? error) configOrError) parameters) {
        if (parameters.configOrError.error is not null)
            return;

        Config config = parameters.configOrError.config!;
        ImmutableArray<TSModule> moduleList = parameters.moduleList;

        if (!config.ServiceExtension)
            return;


        StringBuilder builder = stringBuilderPool.Get();

        builder.Append($$"""
            // <auto-generated/>
            #pragma warning disable
            #nullable enable annotations


            using Microsoft.Extensions.DependencyInjection;

            namespace Microsoft.JSInterop;

            [System.CodeDom.Compiler.GeneratedCodeAttribute("{{Assembly.NAME}}", "{{Assembly.VERSION_MAJOR_MINOR_BUILD}}")]
            public static class TSRuntimeServiceExtension {
                /// <summary>
                /// Registers a scoped ITSRuntime with a TSRuntime as implementation and if available, registers the module interfaces with the same TSRuntime-object.
                /// </summary>
                /// <param name="services"></param>
                /// <returns></returns>
                public static IServiceCollection AddTSRuntime(this IServiceCollection services) {
                    services.AddScoped<ITSRuntime, TSRuntime>();


            """);

        if (config.ModuleGrouping)
            foreach (TSModule module in moduleList) {
                builder.Append("        services.AddScoped(serviceProvider => (");
                config.ModuleGroupingNamePattern.AppendNaming(builder, module.Name);
                builder.Append(")serviceProvider.GetRequiredService<ITSRuntime>());\n");
            }
        else
            builder.Length--;

        builder.Append("""

                    return services;
                }
            }

            """);


        string source = builder.ToString();
        context.AddSource("TSRuntime_ServiceExtension.g.cs", source);
        stringBuilderPool.Return(builder);
    }
}
