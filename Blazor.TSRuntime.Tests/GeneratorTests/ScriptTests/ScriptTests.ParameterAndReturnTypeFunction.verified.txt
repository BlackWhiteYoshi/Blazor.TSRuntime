// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Components;
using System.Numerics;

namespace Microsoft.JSInterop;

public partial interface ITSRuntime {
    /// <summary>
    /// <para>Invokes in script 'site' the JS-function 'Test' synchronously.</para>
    /// </summary>
    /// <typeparam name="TNumber"></typeparam>
    /// <param name="str"></param>
    /// <param name="a"></param>
    /// <returns>Result of the JS-function.</returns>
    public TNumber TestInvoke<TNumber>(string str, bool a) where TNumber : INumber<TNumber> {
        return TSInvoke<TNumber>("Test", [str, a]);
    }

    /// <summary>
    /// <para>Invokes in script 'site' the JS-function 'Test' synchronously when supported, otherwise asynchronously.</para>
    /// </summary>
    /// <typeparam name="TNumber"></typeparam>
    /// <param name="str"></param>
    /// <param name="a"></param>
    /// <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>
    /// <returns>Result of the JS-function.</returns>
    public async ValueTask<TNumber> TestInvokeTrySync<TNumber>(string str, bool a, CancellationToken cancellationToken = default) where TNumber : INumber<TNumber> {
        return await TSInvokeTrySync<TNumber>("Test", [str, a], cancellationToken);
    }

    /// <summary>
    /// <para>Invokes in script 'site' the JS-function 'Test' asynchronously.</para>
    /// </summary>
    /// <typeparam name="TNumber"></typeparam>
    /// <param name="str"></param>
    /// <param name="a"></param>
    /// <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>
    /// <returns>Result of the JS-function.</returns>
    public async ValueTask<TNumber> TestInvokeAsync<TNumber>(string str, bool a, CancellationToken cancellationToken = default) where TNumber : INumber<TNumber> {
        return await TSInvokeAsync<TNumber>("Test", [str, a], cancellationToken);
    }
}
