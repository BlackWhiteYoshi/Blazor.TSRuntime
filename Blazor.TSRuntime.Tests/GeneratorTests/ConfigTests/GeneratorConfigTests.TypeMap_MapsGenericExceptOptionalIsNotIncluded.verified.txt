------
Module
------

// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Components;
using System.Numerics;

namespace Microsoft.JSInterop;

public partial interface ITSRuntime {
    protected Task<IJSObjectReference> GetmoduleModule();

    /// <summary>
    /// <para>Loads 'module' (/module.js) as javascript-module.</para>
    /// <para>If already loading, it does not trigger a second loading and if already loaded, it returns a completed task.</para>
    /// </summary>
    /// <returns>A Task that will complete when the module import have completed.</returns>
    public Task PreloadModule() => GetmoduleModule();


    /// <summary>
    /// <para>Invokes in module 'module' the JS-function 'Test' synchronously when supported, otherwise asynchronously.</para>
    /// </summary>
    /// <typeparam name="TNumber"></typeparam>
    /// <param name="a"></param>
    /// <param name="b"></param>
    /// <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>
    /// <returns>A Task that will complete when the JS-Function have completed.</returns>
    public async ValueTask Test<TNumber>(string a, TNumber b, CancellationToken cancellationToken = default) where TNumber : INumber<TNumber> {
        await TSInvokeTrySync<Infrastructure.IJSVoidResult>(GetmoduleModule(), "Test", [a, b], cancellationToken);
    }

    /// <summary>
    /// <para>Invokes in module 'module' the JS-function 'Test' synchronously when supported, otherwise asynchronously.</para>
    /// </summary>
    /// <param name="a"></param>
    /// <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>
    /// <returns>A Task that will complete when the JS-Function have completed.</returns>
    public async ValueTask Test(string a, CancellationToken cancellationToken = default) {
        await TSInvokeTrySync<Infrastructure.IJSVoidResult>(GetmoduleModule(), "Test", [a], cancellationToken);
    }

    /// <summary>
    /// <para>Invokes in module 'module' the JS-function 'Test' synchronously when supported, otherwise asynchronously.</para>
    /// </summary>
    /// <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>
    /// <returns>A Task that will complete when the JS-Function have completed.</returns>
    public async ValueTask Test(CancellationToken cancellationToken = default) {
        await TSInvokeTrySync<Infrastructure.IJSVoidResult>(GetmoduleModule(), "Test", [], cancellationToken);
    }
}
